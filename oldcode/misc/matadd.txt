//CPU
void addMatrix(float *a, float *b,
               float *c, int N)
{
  int i, j, index;
  for (i = 0; i < N; i++) {
    for (j = 0; j < N; j++) {
      index = i + j * N;
      c[index]=a[index] + b[index];
    }
  }
}
void main()
{
  .....
  addMatrix(a, b, c, N);
}
//GPU
__global__ void addMatrix(float *a,float *b,
                          float *c, int N)
{
  int i=blockIdx.x*blockDim.x+threadIdx.x;
  int j=blockIdx.y*blockDim.y+threadIdx.y;
  int index = i + j * N;
  if ( i < N && j < N)
    c[index]= a[index] + b[index];
}
void main()
{
  ..... // allocate & transfer data to GPU
  dim3 dimBlk (blocksize, blocksize);
  dim3 dimGrd (N/dimBlk.x, N/dimBlk.y);
  addMatrix<<<dimGrd,dimBlk>>>(a, b, c,N);
}
//GPU
// Compute vector sum C = A+B
// Each thread performs one pair-wise addition
__global__ void vecAdd(float* A, float* B, float* C)
{
    int i = threadIdx.x + blockDim.x * blockIdx.x;
    C[i] = A[i] + B[i];
}
__global__ void vecAdd(float* A, float* B, float* C);
void main()
{
    // Execute on N/256 blocks of 256 threads each
    vecAdd<<< N/256, 256>>>(d_A, d_B, d_C);
}
//GPU
__global__ void transpose_naive(float *odata, float *idata, int width, int height)
{
 unsigned int xIndex = blockDim.x * blockIdx.x + threadIdx.x;
 unsigned int yIndex = blockDim.y * blockIdx.y + threadIdx.y;
 if (xIndex < width && yIndex < height)
  {
     unsigned int index_in = xIndex + width * yIndex;
     unsigned int index_out = yIndex + height * xIndex;
     odata[index_out] = idata[index_in];
  }
}
__global__ void transpose(float *odata, float *idata, int width, int height)
{
 __shared__ float block[(BLOCK_DIM+1)*BLOCK_DIM];
 unsigned int xBlock = __mul24(blockDim.x, blockIdx.x);
 unsigned int yBlock = __mul24(blockDim.y, blockIdx.y);
 unsigned int xIndex = xBlock + threadIdx.x;
 unsigned int yIndex = yBlock + threadIdx.y;
 unsigned int index_out, index_transpose;
 if (xIndex < width && yIndex < height)
 {
     unsigned int index_in = __mul24(width, yIndex) + xIndex;
     unsigned int index_block = __mul24(threadIdx.y, BLOCK_DIM+1) + threadIdx.x;
     block[index_block] = idata[index_in];
     index_transpose = __mul24(threadIdx.x, BLOCK_DIM+1) + threadIdx.y;
     index_out = __mul24(height, xBlock + threadIdx.y) + yBlock + threadIdx.x;
 }
 __syncthreads();
 if (xIndex < width && yIndex < height)
     odata[index_out] = block[index_transpose];
}
//GPU
template <unsigned int blockSize>
__global__ void reduce6(int *g_idata, int *g_odata, unsigned int n)
{
  extern __shared__ int sdata[];
  unsigned int tid = threadIdx.x;
  unsigned int i = blockIdx.x*(blockSize*2) + tid;      //Final Optimized Kernel
  unsigned int gridSize = blockSize*2*gridDim.x;
  sdata[tid] = 0;
  do { sdata[tid] += g_idata[i] + g_idata[i+blockSize]; i += gridSize; } while (i < n);
  __syncthreads();
  if (blockSize >= 512) { if (tid < 256) { sdata[tid] += sdata[tid + 256]; } __syncthreads(); }
  if (blockSize >= 256) { if (tid < 128) { sdata[tid] += sdata[tid + 128]; } __syncthreads(); }
  if (blockSize >= 128) { if (tid < 64) { sdata[tid] += sdata[tid + 64]; } __syncthreads(); }
  if (tid < 32) {
      if (blockSize >= 64) sdata[tid] += sdata[tid + 32];
      if (blockSize >= 32) sdata[tid] += sdata[tid + 16];
      if (blockSize >= 16) sdata[tid] += sdata[tid + 8];
      if (blockSize >= 8) sdata[tid] += sdata[tid + 4];
      if (blockSize >= 4) sdata[tid] += sdata[tid + 2];
      if (blockSize >= 2) sdata[tid] += sdata[tid + 1];
  }
  if (tid == 0) g_odata[blockIdx.x] = sdata[0];
}
// textures vs __constant__

__constant__ short hash_g[1024];
__constant__ short hash_h[8192];
...
return hash_h[(hash_g[b] + a) & 0x1fff];

texture<short, 1, cudaReadModeElementType> hash_g;
texture<short, 1, cudaReadModeElementType> hash_h;
...
cudaBindTexture(0, hash_g, hash_g_gpu, sizeof(hash_g_cpu));
cudaBindTexture(0, hash_h, hash_h_gpu, sizeof(hash_h_cpu));
...
return tex1Dfetch(hash_h, (tex1Dfetch(hash_g, b) + a) & 0x1fff);

Constants: method=[ _Z4testPiP11permutation ]
    gputime=[ 60942.465 ] cputime=[ 60972.000 ] occupancy=[ 1.000 ]
Texture: method=[ _Z4testPiP11permutation ]
    gputime=[ 29661.119 ] cputime=[ 29920.000 ] occupancy=[ 1.000 ]
